// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Rtn.Order.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Evelynn.Base.Return {

  /// <summary>Holder for reflection information generated from Rtn.Order.proto</summary>
  public static partial class RtnOrderReflection {

    #region Descriptor
    /// <summary>File descriptor for Rtn.Order.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RtnOrderReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9SdG4uT3JkZXIucHJvdG8SA3J0biLIBgoKT3JkZXJGaWVsZBIRCglicm9r",
            "ZXJfaWQYASABKAkSEwoLaW52ZXN0b3JfaWQYAiABKAkSFQoNaW5zdHJ1bWVu",
            "dF9pZBgDIAEoCRIRCglvcmRlcl9yZWYYBCABKAkSDwoHdXNlcl9pZBgFIAEo",
            "CRIRCglkaXJlY3Rpb24YBiABKAUSGAoQY29tYl9vZmZzZXRfZmxhZxgHIAEo",
            "BRIXCg9jb21iX2hlZGdlX2ZsYWcYCCABKAUSEwoLbGltaXRfcHJpY2UYCSAB",
            "KAESHQoVdm9sdW1lX3RvdGFsX29yaWdpbmFsGAogASgFEhYKDnRpbWVfY29u",
            "ZGl0aW9uGAsgASgFEhgKEHZvbHVtZV9jb25kaXRpb24YDCABKAUSEgoKbWlu",
            "X3ZvbHVtZRgNIAEoBRIbChNjb250aWdlbnRfY29uZGl0aW9uGA4gASgFEhIK",
            "CnN0b3BfcHJpY2UYDyABKAESFwoPaXNfYXV0b19zdXNwZW5kGBAgASgFEhIK",
            "CnJlcXVlc3RfaWQYESABKAUSFgoOb3JkZXJfbG9jYWxfaWQYEiABKAkSEwoL",
            "ZXhjaGFuZ2VfaWQYEyABKAkSGwoTb3JkZXJfc3VibWl0X3N0YXR1cxgUIAEo",
            "BRITCgt0cmFkaW5nX2RheRgVIAEoCRIUCgxvcmRlcl9zeXNfaWQYFiABKAkS",
            "FAoMb3JkZXJfc3RhdHVzGBcgASgFEhUKDXZvbHVtZV90cmFkZWQYGCABKAUS",
            "FAoMdm9sdW1lX3RvdGFsGBkgASgFEhMKC2luc2VydF9kYXRlGBogASgJEhMK",
            "C2luc2VydF90aW1lGBsgASgJEhMKC2FjdGl2ZV90aW1lGBwgASgJEhQKDHN1",
            "c3BlbmRfdGltZRgdIAEoCRITCgt1cGRhdGVfdGltZRgeIAEoCRITCgtjYW5j",
            "ZWxfdGltZRgfIAEoCRIQCghmcm9udF9pZBggIAEoBRISCgpzZXNzaW9uX2lk",
            "GCEgASgFEhIKCnN0YXR1c19tc2cYIiABKAkSHwoXemNlX3RvdGFsX3RyYWRl",
            "ZF92b2x1bWUYIyABKAUSEgoKYWNjb3VudF9pZBgkIAEoCRITCgtjdXJyZW5j",
            "eV9pZBglIAEoCUI+ChVpby5ldmVseW5uLmJhc2UucHJvdG9CD09yZGVyRmll",
            "bGRQcm90b6oCE0V2ZWx5bm4uQmFzZS5SZXR1cm5iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Evelynn.Base.Return.OrderField), global::Evelynn.Base.Return.OrderField.Parser, new[]{ "BrokerId", "InvestorId", "InstrumentId", "OrderRef", "UserId", "Direction", "CombOffsetFlag", "CombHedgeFlag", "LimitPrice", "VolumeTotalOriginal", "TimeCondition", "VolumeCondition", "MinVolume", "ContigentCondition", "StopPrice", "IsAutoSuspend", "RequestId", "OrderLocalId", "ExchangeId", "OrderSubmitStatus", "TradingDay", "OrderSysId", "OrderStatus", "VolumeTraded", "VolumeTotal", "InsertDate", "InsertTime", "ActiveTime", "SuspendTime", "UpdateTime", "CancelTime", "FrontId", "SessionId", "StatusMsg", "ZceTotalTradedVolume", "AccountId", "CurrencyId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class OrderField : pb::IMessage<OrderField>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderField> _parser = new pb::MessageParser<OrderField>(() => new OrderField());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderField> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Evelynn.Base.Return.RtnOrderReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderField() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderField(OrderField other) : this() {
      brokerId_ = other.brokerId_;
      investorId_ = other.investorId_;
      instrumentId_ = other.instrumentId_;
      orderRef_ = other.orderRef_;
      userId_ = other.userId_;
      direction_ = other.direction_;
      combOffsetFlag_ = other.combOffsetFlag_;
      combHedgeFlag_ = other.combHedgeFlag_;
      limitPrice_ = other.limitPrice_;
      volumeTotalOriginal_ = other.volumeTotalOriginal_;
      timeCondition_ = other.timeCondition_;
      volumeCondition_ = other.volumeCondition_;
      minVolume_ = other.minVolume_;
      contigentCondition_ = other.contigentCondition_;
      stopPrice_ = other.stopPrice_;
      isAutoSuspend_ = other.isAutoSuspend_;
      requestId_ = other.requestId_;
      orderLocalId_ = other.orderLocalId_;
      exchangeId_ = other.exchangeId_;
      orderSubmitStatus_ = other.orderSubmitStatus_;
      tradingDay_ = other.tradingDay_;
      orderSysId_ = other.orderSysId_;
      orderStatus_ = other.orderStatus_;
      volumeTraded_ = other.volumeTraded_;
      volumeTotal_ = other.volumeTotal_;
      insertDate_ = other.insertDate_;
      insertTime_ = other.insertTime_;
      activeTime_ = other.activeTime_;
      suspendTime_ = other.suspendTime_;
      updateTime_ = other.updateTime_;
      cancelTime_ = other.cancelTime_;
      frontId_ = other.frontId_;
      sessionId_ = other.sessionId_;
      statusMsg_ = other.statusMsg_;
      zceTotalTradedVolume_ = other.zceTotalTradedVolume_;
      accountId_ = other.accountId_;
      currencyId_ = other.currencyId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderField Clone() {
      return new OrderField(this);
    }

    /// <summary>Field number for the "broker_id" field.</summary>
    public const int BrokerIdFieldNumber = 1;
    private string brokerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrokerId {
      get { return brokerId_; }
      set {
        brokerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "investor_id" field.</summary>
    public const int InvestorIdFieldNumber = 2;
    private string investorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InvestorId {
      get { return investorId_; }
      set {
        investorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_id" field.</summary>
    public const int InstrumentIdFieldNumber = 3;
    private string instrumentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstrumentId {
      get { return instrumentId_; }
      set {
        instrumentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_ref" field.</summary>
    public const int OrderRefFieldNumber = 4;
    private string orderRef_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderRef {
      get { return orderRef_; }
      set {
        orderRef_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 5;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 6;
    private int direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "comb_offset_flag" field.</summary>
    public const int CombOffsetFlagFieldNumber = 7;
    private int combOffsetFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CombOffsetFlag {
      get { return combOffsetFlag_; }
      set {
        combOffsetFlag_ = value;
      }
    }

    /// <summary>Field number for the "comb_hedge_flag" field.</summary>
    public const int CombHedgeFlagFieldNumber = 8;
    private int combHedgeFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CombHedgeFlag {
      get { return combHedgeFlag_; }
      set {
        combHedgeFlag_ = value;
      }
    }

    /// <summary>Field number for the "limit_price" field.</summary>
    public const int LimitPriceFieldNumber = 9;
    private double limitPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LimitPrice {
      get { return limitPrice_; }
      set {
        limitPrice_ = value;
      }
    }

    /// <summary>Field number for the "volume_total_original" field.</summary>
    public const int VolumeTotalOriginalFieldNumber = 10;
    private int volumeTotalOriginal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VolumeTotalOriginal {
      get { return volumeTotalOriginal_; }
      set {
        volumeTotalOriginal_ = value;
      }
    }

    /// <summary>Field number for the "time_condition" field.</summary>
    public const int TimeConditionFieldNumber = 11;
    private int timeCondition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeCondition {
      get { return timeCondition_; }
      set {
        timeCondition_ = value;
      }
    }

    /// <summary>Field number for the "volume_condition" field.</summary>
    public const int VolumeConditionFieldNumber = 12;
    private int volumeCondition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VolumeCondition {
      get { return volumeCondition_; }
      set {
        volumeCondition_ = value;
      }
    }

    /// <summary>Field number for the "min_volume" field.</summary>
    public const int MinVolumeFieldNumber = 13;
    private int minVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinVolume {
      get { return minVolume_; }
      set {
        minVolume_ = value;
      }
    }

    /// <summary>Field number for the "contigent_condition" field.</summary>
    public const int ContigentConditionFieldNumber = 14;
    private int contigentCondition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContigentCondition {
      get { return contigentCondition_; }
      set {
        contigentCondition_ = value;
      }
    }

    /// <summary>Field number for the "stop_price" field.</summary>
    public const int StopPriceFieldNumber = 15;
    private double stopPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopPrice {
      get { return stopPrice_; }
      set {
        stopPrice_ = value;
      }
    }

    /// <summary>Field number for the "is_auto_suspend" field.</summary>
    public const int IsAutoSuspendFieldNumber = 16;
    private int isAutoSuspend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsAutoSuspend {
      get { return isAutoSuspend_; }
      set {
        isAutoSuspend_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 17;
    private int requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "order_local_id" field.</summary>
    public const int OrderLocalIdFieldNumber = 18;
    private string orderLocalId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderLocalId {
      get { return orderLocalId_; }
      set {
        orderLocalId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange_id" field.</summary>
    public const int ExchangeIdFieldNumber = 19;
    private string exchangeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExchangeId {
      get { return exchangeId_; }
      set {
        exchangeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_submit_status" field.</summary>
    public const int OrderSubmitStatusFieldNumber = 20;
    private int orderSubmitStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderSubmitStatus {
      get { return orderSubmitStatus_; }
      set {
        orderSubmitStatus_ = value;
      }
    }

    /// <summary>Field number for the "trading_day" field.</summary>
    public const int TradingDayFieldNumber = 21;
    private string tradingDay_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradingDay {
      get { return tradingDay_; }
      set {
        tradingDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_sys_id" field.</summary>
    public const int OrderSysIdFieldNumber = 22;
    private string orderSysId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderSysId {
      get { return orderSysId_; }
      set {
        orderSysId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_status" field.</summary>
    public const int OrderStatusFieldNumber = 23;
    private int orderStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderStatus {
      get { return orderStatus_; }
      set {
        orderStatus_ = value;
      }
    }

    /// <summary>Field number for the "volume_traded" field.</summary>
    public const int VolumeTradedFieldNumber = 24;
    private int volumeTraded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VolumeTraded {
      get { return volumeTraded_; }
      set {
        volumeTraded_ = value;
      }
    }

    /// <summary>Field number for the "volume_total" field.</summary>
    public const int VolumeTotalFieldNumber = 25;
    private int volumeTotal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VolumeTotal {
      get { return volumeTotal_; }
      set {
        volumeTotal_ = value;
      }
    }

    /// <summary>Field number for the "insert_date" field.</summary>
    public const int InsertDateFieldNumber = 26;
    private string insertDate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InsertDate {
      get { return insertDate_; }
      set {
        insertDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "insert_time" field.</summary>
    public const int InsertTimeFieldNumber = 27;
    private string insertTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InsertTime {
      get { return insertTime_; }
      set {
        insertTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "active_time" field.</summary>
    public const int ActiveTimeFieldNumber = 28;
    private string activeTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActiveTime {
      get { return activeTime_; }
      set {
        activeTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "suspend_time" field.</summary>
    public const int SuspendTimeFieldNumber = 29;
    private string suspendTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SuspendTime {
      get { return suspendTime_; }
      set {
        suspendTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 30;
    private string updateTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cancel_time" field.</summary>
    public const int CancelTimeFieldNumber = 31;
    private string cancelTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CancelTime {
      get { return cancelTime_; }
      set {
        cancelTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "front_id" field.</summary>
    public const int FrontIdFieldNumber = 32;
    private int frontId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrontId {
      get { return frontId_; }
      set {
        frontId_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 33;
    private int sessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    /// <summary>Field number for the "status_msg" field.</summary>
    public const int StatusMsgFieldNumber = 34;
    private string statusMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusMsg {
      get { return statusMsg_; }
      set {
        statusMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zce_total_traded_volume" field.</summary>
    public const int ZceTotalTradedVolumeFieldNumber = 35;
    private int zceTotalTradedVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZceTotalTradedVolume {
      get { return zceTotalTradedVolume_; }
      set {
        zceTotalTradedVolume_ = value;
      }
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 36;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currency_id" field.</summary>
    public const int CurrencyIdFieldNumber = 37;
    private string currencyId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrencyId {
      get { return currencyId_; }
      set {
        currencyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderField);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderField other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BrokerId != other.BrokerId) return false;
      if (InvestorId != other.InvestorId) return false;
      if (InstrumentId != other.InstrumentId) return false;
      if (OrderRef != other.OrderRef) return false;
      if (UserId != other.UserId) return false;
      if (Direction != other.Direction) return false;
      if (CombOffsetFlag != other.CombOffsetFlag) return false;
      if (CombHedgeFlag != other.CombHedgeFlag) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LimitPrice, other.LimitPrice)) return false;
      if (VolumeTotalOriginal != other.VolumeTotalOriginal) return false;
      if (TimeCondition != other.TimeCondition) return false;
      if (VolumeCondition != other.VolumeCondition) return false;
      if (MinVolume != other.MinVolume) return false;
      if (ContigentCondition != other.ContigentCondition) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StopPrice, other.StopPrice)) return false;
      if (IsAutoSuspend != other.IsAutoSuspend) return false;
      if (RequestId != other.RequestId) return false;
      if (OrderLocalId != other.OrderLocalId) return false;
      if (ExchangeId != other.ExchangeId) return false;
      if (OrderSubmitStatus != other.OrderSubmitStatus) return false;
      if (TradingDay != other.TradingDay) return false;
      if (OrderSysId != other.OrderSysId) return false;
      if (OrderStatus != other.OrderStatus) return false;
      if (VolumeTraded != other.VolumeTraded) return false;
      if (VolumeTotal != other.VolumeTotal) return false;
      if (InsertDate != other.InsertDate) return false;
      if (InsertTime != other.InsertTime) return false;
      if (ActiveTime != other.ActiveTime) return false;
      if (SuspendTime != other.SuspendTime) return false;
      if (UpdateTime != other.UpdateTime) return false;
      if (CancelTime != other.CancelTime) return false;
      if (FrontId != other.FrontId) return false;
      if (SessionId != other.SessionId) return false;
      if (StatusMsg != other.StatusMsg) return false;
      if (ZceTotalTradedVolume != other.ZceTotalTradedVolume) return false;
      if (AccountId != other.AccountId) return false;
      if (CurrencyId != other.CurrencyId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BrokerId.Length != 0) hash ^= BrokerId.GetHashCode();
      if (InvestorId.Length != 0) hash ^= InvestorId.GetHashCode();
      if (InstrumentId.Length != 0) hash ^= InstrumentId.GetHashCode();
      if (OrderRef.Length != 0) hash ^= OrderRef.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Direction != 0) hash ^= Direction.GetHashCode();
      if (CombOffsetFlag != 0) hash ^= CombOffsetFlag.GetHashCode();
      if (CombHedgeFlag != 0) hash ^= CombHedgeFlag.GetHashCode();
      if (LimitPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LimitPrice);
      if (VolumeTotalOriginal != 0) hash ^= VolumeTotalOriginal.GetHashCode();
      if (TimeCondition != 0) hash ^= TimeCondition.GetHashCode();
      if (VolumeCondition != 0) hash ^= VolumeCondition.GetHashCode();
      if (MinVolume != 0) hash ^= MinVolume.GetHashCode();
      if (ContigentCondition != 0) hash ^= ContigentCondition.GetHashCode();
      if (StopPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StopPrice);
      if (IsAutoSuspend != 0) hash ^= IsAutoSuspend.GetHashCode();
      if (RequestId != 0) hash ^= RequestId.GetHashCode();
      if (OrderLocalId.Length != 0) hash ^= OrderLocalId.GetHashCode();
      if (ExchangeId.Length != 0) hash ^= ExchangeId.GetHashCode();
      if (OrderSubmitStatus != 0) hash ^= OrderSubmitStatus.GetHashCode();
      if (TradingDay.Length != 0) hash ^= TradingDay.GetHashCode();
      if (OrderSysId.Length != 0) hash ^= OrderSysId.GetHashCode();
      if (OrderStatus != 0) hash ^= OrderStatus.GetHashCode();
      if (VolumeTraded != 0) hash ^= VolumeTraded.GetHashCode();
      if (VolumeTotal != 0) hash ^= VolumeTotal.GetHashCode();
      if (InsertDate.Length != 0) hash ^= InsertDate.GetHashCode();
      if (InsertTime.Length != 0) hash ^= InsertTime.GetHashCode();
      if (ActiveTime.Length != 0) hash ^= ActiveTime.GetHashCode();
      if (SuspendTime.Length != 0) hash ^= SuspendTime.GetHashCode();
      if (UpdateTime.Length != 0) hash ^= UpdateTime.GetHashCode();
      if (CancelTime.Length != 0) hash ^= CancelTime.GetHashCode();
      if (FrontId != 0) hash ^= FrontId.GetHashCode();
      if (SessionId != 0) hash ^= SessionId.GetHashCode();
      if (StatusMsg.Length != 0) hash ^= StatusMsg.GetHashCode();
      if (ZceTotalTradedVolume != 0) hash ^= ZceTotalTradedVolume.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (CurrencyId.Length != 0) hash ^= CurrencyId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BrokerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BrokerId);
      }
      if (InvestorId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InvestorId);
      }
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(InstrumentId);
      }
      if (OrderRef.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OrderRef);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UserId);
      }
      if (Direction != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Direction);
      }
      if (CombOffsetFlag != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CombOffsetFlag);
      }
      if (CombHedgeFlag != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CombHedgeFlag);
      }
      if (LimitPrice != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(LimitPrice);
      }
      if (VolumeTotalOriginal != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(VolumeTotalOriginal);
      }
      if (TimeCondition != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TimeCondition);
      }
      if (VolumeCondition != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(VolumeCondition);
      }
      if (MinVolume != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(MinVolume);
      }
      if (ContigentCondition != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ContigentCondition);
      }
      if (StopPrice != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(StopPrice);
      }
      if (IsAutoSuspend != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(IsAutoSuspend);
      }
      if (RequestId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(RequestId);
      }
      if (OrderLocalId.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(OrderLocalId);
      }
      if (ExchangeId.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ExchangeId);
      }
      if (OrderSubmitStatus != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(OrderSubmitStatus);
      }
      if (TradingDay.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(TradingDay);
      }
      if (OrderSysId.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(OrderSysId);
      }
      if (OrderStatus != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(OrderStatus);
      }
      if (VolumeTraded != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(VolumeTraded);
      }
      if (VolumeTotal != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(VolumeTotal);
      }
      if (InsertDate.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(InsertDate);
      }
      if (InsertTime.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(InsertTime);
      }
      if (ActiveTime.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(ActiveTime);
      }
      if (SuspendTime.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(SuspendTime);
      }
      if (UpdateTime.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(UpdateTime);
      }
      if (CancelTime.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(CancelTime);
      }
      if (FrontId != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(FrontId);
      }
      if (SessionId != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(SessionId);
      }
      if (StatusMsg.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(StatusMsg);
      }
      if (ZceTotalTradedVolume != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(ZceTotalTradedVolume);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(AccountId);
      }
      if (CurrencyId.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(CurrencyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BrokerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BrokerId);
      }
      if (InvestorId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InvestorId);
      }
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(InstrumentId);
      }
      if (OrderRef.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OrderRef);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UserId);
      }
      if (Direction != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Direction);
      }
      if (CombOffsetFlag != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CombOffsetFlag);
      }
      if (CombHedgeFlag != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CombHedgeFlag);
      }
      if (LimitPrice != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(LimitPrice);
      }
      if (VolumeTotalOriginal != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(VolumeTotalOriginal);
      }
      if (TimeCondition != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TimeCondition);
      }
      if (VolumeCondition != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(VolumeCondition);
      }
      if (MinVolume != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(MinVolume);
      }
      if (ContigentCondition != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ContigentCondition);
      }
      if (StopPrice != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(StopPrice);
      }
      if (IsAutoSuspend != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(IsAutoSuspend);
      }
      if (RequestId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(RequestId);
      }
      if (OrderLocalId.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(OrderLocalId);
      }
      if (ExchangeId.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ExchangeId);
      }
      if (OrderSubmitStatus != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(OrderSubmitStatus);
      }
      if (TradingDay.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(TradingDay);
      }
      if (OrderSysId.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(OrderSysId);
      }
      if (OrderStatus != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(OrderStatus);
      }
      if (VolumeTraded != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(VolumeTraded);
      }
      if (VolumeTotal != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(VolumeTotal);
      }
      if (InsertDate.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(InsertDate);
      }
      if (InsertTime.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(InsertTime);
      }
      if (ActiveTime.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(ActiveTime);
      }
      if (SuspendTime.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(SuspendTime);
      }
      if (UpdateTime.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(UpdateTime);
      }
      if (CancelTime.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(CancelTime);
      }
      if (FrontId != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(FrontId);
      }
      if (SessionId != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(SessionId);
      }
      if (StatusMsg.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(StatusMsg);
      }
      if (ZceTotalTradedVolume != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(ZceTotalTradedVolume);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(AccountId);
      }
      if (CurrencyId.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(CurrencyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BrokerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrokerId);
      }
      if (InvestorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InvestorId);
      }
      if (InstrumentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentId);
      }
      if (OrderRef.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderRef);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Direction);
      }
      if (CombOffsetFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CombOffsetFlag);
      }
      if (CombHedgeFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CombHedgeFlag);
      }
      if (LimitPrice != 0D) {
        size += 1 + 8;
      }
      if (VolumeTotalOriginal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VolumeTotalOriginal);
      }
      if (TimeCondition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeCondition);
      }
      if (VolumeCondition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VolumeCondition);
      }
      if (MinVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinVolume);
      }
      if (ContigentCondition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContigentCondition);
      }
      if (StopPrice != 0D) {
        size += 1 + 8;
      }
      if (IsAutoSuspend != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsAutoSuspend);
      }
      if (RequestId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RequestId);
      }
      if (OrderLocalId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderLocalId);
      }
      if (ExchangeId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExchangeId);
      }
      if (OrderSubmitStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderSubmitStatus);
      }
      if (TradingDay.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TradingDay);
      }
      if (OrderSysId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderSysId);
      }
      if (OrderStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderStatus);
      }
      if (VolumeTraded != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VolumeTraded);
      }
      if (VolumeTotal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VolumeTotal);
      }
      if (InsertDate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InsertDate);
      }
      if (InsertTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InsertTime);
      }
      if (ActiveTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ActiveTime);
      }
      if (SuspendTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SuspendTime);
      }
      if (UpdateTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UpdateTime);
      }
      if (CancelTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CancelTime);
      }
      if (FrontId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FrontId);
      }
      if (SessionId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SessionId);
      }
      if (StatusMsg.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StatusMsg);
      }
      if (ZceTotalTradedVolume != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ZceTotalTradedVolume);
      }
      if (AccountId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (CurrencyId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CurrencyId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderField other) {
      if (other == null) {
        return;
      }
      if (other.BrokerId.Length != 0) {
        BrokerId = other.BrokerId;
      }
      if (other.InvestorId.Length != 0) {
        InvestorId = other.InvestorId;
      }
      if (other.InstrumentId.Length != 0) {
        InstrumentId = other.InstrumentId;
      }
      if (other.OrderRef.Length != 0) {
        OrderRef = other.OrderRef;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Direction != 0) {
        Direction = other.Direction;
      }
      if (other.CombOffsetFlag != 0) {
        CombOffsetFlag = other.CombOffsetFlag;
      }
      if (other.CombHedgeFlag != 0) {
        CombHedgeFlag = other.CombHedgeFlag;
      }
      if (other.LimitPrice != 0D) {
        LimitPrice = other.LimitPrice;
      }
      if (other.VolumeTotalOriginal != 0) {
        VolumeTotalOriginal = other.VolumeTotalOriginal;
      }
      if (other.TimeCondition != 0) {
        TimeCondition = other.TimeCondition;
      }
      if (other.VolumeCondition != 0) {
        VolumeCondition = other.VolumeCondition;
      }
      if (other.MinVolume != 0) {
        MinVolume = other.MinVolume;
      }
      if (other.ContigentCondition != 0) {
        ContigentCondition = other.ContigentCondition;
      }
      if (other.StopPrice != 0D) {
        StopPrice = other.StopPrice;
      }
      if (other.IsAutoSuspend != 0) {
        IsAutoSuspend = other.IsAutoSuspend;
      }
      if (other.RequestId != 0) {
        RequestId = other.RequestId;
      }
      if (other.OrderLocalId.Length != 0) {
        OrderLocalId = other.OrderLocalId;
      }
      if (other.ExchangeId.Length != 0) {
        ExchangeId = other.ExchangeId;
      }
      if (other.OrderSubmitStatus != 0) {
        OrderSubmitStatus = other.OrderSubmitStatus;
      }
      if (other.TradingDay.Length != 0) {
        TradingDay = other.TradingDay;
      }
      if (other.OrderSysId.Length != 0) {
        OrderSysId = other.OrderSysId;
      }
      if (other.OrderStatus != 0) {
        OrderStatus = other.OrderStatus;
      }
      if (other.VolumeTraded != 0) {
        VolumeTraded = other.VolumeTraded;
      }
      if (other.VolumeTotal != 0) {
        VolumeTotal = other.VolumeTotal;
      }
      if (other.InsertDate.Length != 0) {
        InsertDate = other.InsertDate;
      }
      if (other.InsertTime.Length != 0) {
        InsertTime = other.InsertTime;
      }
      if (other.ActiveTime.Length != 0) {
        ActiveTime = other.ActiveTime;
      }
      if (other.SuspendTime.Length != 0) {
        SuspendTime = other.SuspendTime;
      }
      if (other.UpdateTime.Length != 0) {
        UpdateTime = other.UpdateTime;
      }
      if (other.CancelTime.Length != 0) {
        CancelTime = other.CancelTime;
      }
      if (other.FrontId != 0) {
        FrontId = other.FrontId;
      }
      if (other.SessionId != 0) {
        SessionId = other.SessionId;
      }
      if (other.StatusMsg.Length != 0) {
        StatusMsg = other.StatusMsg;
      }
      if (other.ZceTotalTradedVolume != 0) {
        ZceTotalTradedVolume = other.ZceTotalTradedVolume;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.CurrencyId.Length != 0) {
        CurrencyId = other.CurrencyId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BrokerId = input.ReadString();
            break;
          }
          case 18: {
            InvestorId = input.ReadString();
            break;
          }
          case 26: {
            InstrumentId = input.ReadString();
            break;
          }
          case 34: {
            OrderRef = input.ReadString();
            break;
          }
          case 42: {
            UserId = input.ReadString();
            break;
          }
          case 48: {
            Direction = input.ReadInt32();
            break;
          }
          case 56: {
            CombOffsetFlag = input.ReadInt32();
            break;
          }
          case 64: {
            CombHedgeFlag = input.ReadInt32();
            break;
          }
          case 73: {
            LimitPrice = input.ReadDouble();
            break;
          }
          case 80: {
            VolumeTotalOriginal = input.ReadInt32();
            break;
          }
          case 88: {
            TimeCondition = input.ReadInt32();
            break;
          }
          case 96: {
            VolumeCondition = input.ReadInt32();
            break;
          }
          case 104: {
            MinVolume = input.ReadInt32();
            break;
          }
          case 112: {
            ContigentCondition = input.ReadInt32();
            break;
          }
          case 121: {
            StopPrice = input.ReadDouble();
            break;
          }
          case 128: {
            IsAutoSuspend = input.ReadInt32();
            break;
          }
          case 136: {
            RequestId = input.ReadInt32();
            break;
          }
          case 146: {
            OrderLocalId = input.ReadString();
            break;
          }
          case 154: {
            ExchangeId = input.ReadString();
            break;
          }
          case 160: {
            OrderSubmitStatus = input.ReadInt32();
            break;
          }
          case 170: {
            TradingDay = input.ReadString();
            break;
          }
          case 178: {
            OrderSysId = input.ReadString();
            break;
          }
          case 184: {
            OrderStatus = input.ReadInt32();
            break;
          }
          case 192: {
            VolumeTraded = input.ReadInt32();
            break;
          }
          case 200: {
            VolumeTotal = input.ReadInt32();
            break;
          }
          case 210: {
            InsertDate = input.ReadString();
            break;
          }
          case 218: {
            InsertTime = input.ReadString();
            break;
          }
          case 226: {
            ActiveTime = input.ReadString();
            break;
          }
          case 234: {
            SuspendTime = input.ReadString();
            break;
          }
          case 242: {
            UpdateTime = input.ReadString();
            break;
          }
          case 250: {
            CancelTime = input.ReadString();
            break;
          }
          case 256: {
            FrontId = input.ReadInt32();
            break;
          }
          case 264: {
            SessionId = input.ReadInt32();
            break;
          }
          case 274: {
            StatusMsg = input.ReadString();
            break;
          }
          case 280: {
            ZceTotalTradedVolume = input.ReadInt32();
            break;
          }
          case 290: {
            AccountId = input.ReadString();
            break;
          }
          case 298: {
            CurrencyId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            BrokerId = input.ReadString();
            break;
          }
          case 18: {
            InvestorId = input.ReadString();
            break;
          }
          case 26: {
            InstrumentId = input.ReadString();
            break;
          }
          case 34: {
            OrderRef = input.ReadString();
            break;
          }
          case 42: {
            UserId = input.ReadString();
            break;
          }
          case 48: {
            Direction = input.ReadInt32();
            break;
          }
          case 56: {
            CombOffsetFlag = input.ReadInt32();
            break;
          }
          case 64: {
            CombHedgeFlag = input.ReadInt32();
            break;
          }
          case 73: {
            LimitPrice = input.ReadDouble();
            break;
          }
          case 80: {
            VolumeTotalOriginal = input.ReadInt32();
            break;
          }
          case 88: {
            TimeCondition = input.ReadInt32();
            break;
          }
          case 96: {
            VolumeCondition = input.ReadInt32();
            break;
          }
          case 104: {
            MinVolume = input.ReadInt32();
            break;
          }
          case 112: {
            ContigentCondition = input.ReadInt32();
            break;
          }
          case 121: {
            StopPrice = input.ReadDouble();
            break;
          }
          case 128: {
            IsAutoSuspend = input.ReadInt32();
            break;
          }
          case 136: {
            RequestId = input.ReadInt32();
            break;
          }
          case 146: {
            OrderLocalId = input.ReadString();
            break;
          }
          case 154: {
            ExchangeId = input.ReadString();
            break;
          }
          case 160: {
            OrderSubmitStatus = input.ReadInt32();
            break;
          }
          case 170: {
            TradingDay = input.ReadString();
            break;
          }
          case 178: {
            OrderSysId = input.ReadString();
            break;
          }
          case 184: {
            OrderStatus = input.ReadInt32();
            break;
          }
          case 192: {
            VolumeTraded = input.ReadInt32();
            break;
          }
          case 200: {
            VolumeTotal = input.ReadInt32();
            break;
          }
          case 210: {
            InsertDate = input.ReadString();
            break;
          }
          case 218: {
            InsertTime = input.ReadString();
            break;
          }
          case 226: {
            ActiveTime = input.ReadString();
            break;
          }
          case 234: {
            SuspendTime = input.ReadString();
            break;
          }
          case 242: {
            UpdateTime = input.ReadString();
            break;
          }
          case 250: {
            CancelTime = input.ReadString();
            break;
          }
          case 256: {
            FrontId = input.ReadInt32();
            break;
          }
          case 264: {
            SessionId = input.ReadInt32();
            break;
          }
          case 274: {
            StatusMsg = input.ReadString();
            break;
          }
          case 280: {
            ZceTotalTradedVolume = input.ReadInt32();
            break;
          }
          case 290: {
            AccountId = input.ReadString();
            break;
          }
          case 298: {
            CurrencyId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
