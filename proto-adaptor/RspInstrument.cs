// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Rsp.Instrument.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Evelynn.Base.Proto {

  /// <summary>Holder for reflection information generated from Rsp.Instrument.proto</summary>
  public static partial class RspInstrumentReflection {

    #region Descriptor
    /// <summary>File descriptor for Rsp.Instrument.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RspInstrumentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRSc3AuSW5zdHJ1bWVudC5wcm90bxIDcnNwIv8DCg9JbnN0cnVtZW50Rmll",
            "bGQSFQoNaW5zdHJ1bWVudF9pZBgBIAEoCRITCgtleGNoYW5nZV9pZBgCIAEo",
            "CRIXCg9pbnN0cnVtZW50X25hbWUYAyABKAwSEgoKcHJvZHVjdF9pZBgEIAEo",
            "CRIVCg1wcm9kdWN0X2NsYXNzGAUgASgFEhUKDWRlbGl2ZXJ5X3llYXIYBiAB",
            "KAUSFgoOZGVsaXZlcnlfbW9udGgYByABKAUSHwoXbWF4X21hcmtldF9vcmRl",
            "cl92b2x1bWUYCCABKAUSHwoXbWluX21hcmtldF9vcmRlcl92b2x1bWUYCSAB",
            "KAUSHgoWbWF4X2xpbWl0X29yZGVyX3ZvbHVtZRgKIAEoBRIeChZtaW5fbGlt",
            "aXRfb3JkZXJfdm9sdW1lGAsgASgFEhcKD3ZvbHVtZV9tdWx0aXBsZRgMIAEo",
            "BRISCgpwcmljZV90aWNrGA0gASgBEhMKC2NyZWF0ZV9kYXRlGA4gASgJEhEK",
            "CW9wZW5fZGF0ZRgPIAEoCRITCgtleHBpcmVfZGF0ZRgQIAEoCRIYChBzdGFy",
            "dF9kZWxpdl9kYXRlGBEgASgJEhYKDmVuZF9kZWxpdl9kYXRlGBIgASgJEhIK",
            "CmlzX3RyYWRpbmcYEyABKAgSGwoTdW5kZXJseWluZ19tdWx0aXBsZRgUIAEo",
            "BUJCChVpby5ldmVseW5uLmJhc2UucHJvdG9CFEluc3RydW1lbnRGaWVsZFBy",
            "b3RvqgISRXZlbHlubi5CYXNlLlByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Evelynn.Base.Proto.InstrumentField), global::Evelynn.Base.Proto.InstrumentField.Parser, new[]{ "InstrumentId", "ExchangeId", "InstrumentName", "ProductId", "ProductClass", "DeliveryYear", "DeliveryMonth", "MaxMarketOrderVolume", "MinMarketOrderVolume", "MaxLimitOrderVolume", "MinLimitOrderVolume", "VolumeMultiple", "PriceTick", "CreateDate", "OpenDate", "ExpireDate", "StartDelivDate", "EndDelivDate", "IsTrading", "UnderlyingMultiple" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InstrumentField : pb::IMessage<InstrumentField>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentField> _parser = new pb::MessageParser<InstrumentField>(() => new InstrumentField());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstrumentField> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Evelynn.Base.Proto.RspInstrumentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentField() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentField(InstrumentField other) : this() {
      instrumentId_ = other.instrumentId_;
      exchangeId_ = other.exchangeId_;
      instrumentName_ = other.instrumentName_;
      productId_ = other.productId_;
      productClass_ = other.productClass_;
      deliveryYear_ = other.deliveryYear_;
      deliveryMonth_ = other.deliveryMonth_;
      maxMarketOrderVolume_ = other.maxMarketOrderVolume_;
      minMarketOrderVolume_ = other.minMarketOrderVolume_;
      maxLimitOrderVolume_ = other.maxLimitOrderVolume_;
      minLimitOrderVolume_ = other.minLimitOrderVolume_;
      volumeMultiple_ = other.volumeMultiple_;
      priceTick_ = other.priceTick_;
      createDate_ = other.createDate_;
      openDate_ = other.openDate_;
      expireDate_ = other.expireDate_;
      startDelivDate_ = other.startDelivDate_;
      endDelivDate_ = other.endDelivDate_;
      isTrading_ = other.isTrading_;
      underlyingMultiple_ = other.underlyingMultiple_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentField Clone() {
      return new InstrumentField(this);
    }

    /// <summary>Field number for the "instrument_id" field.</summary>
    public const int InstrumentIdFieldNumber = 1;
    private string instrumentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstrumentId {
      get { return instrumentId_; }
      set {
        instrumentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange_id" field.</summary>
    public const int ExchangeIdFieldNumber = 2;
    private string exchangeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExchangeId {
      get { return exchangeId_; }
      set {
        exchangeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_name" field.</summary>
    public const int InstrumentNameFieldNumber = 3;
    private pb::ByteString instrumentName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString InstrumentName {
      get { return instrumentName_; }
      set {
        instrumentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product_id" field.</summary>
    public const int ProductIdFieldNumber = 4;
    private string productId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product_class" field.</summary>
    public const int ProductClassFieldNumber = 5;
    private int productClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProductClass {
      get { return productClass_; }
      set {
        productClass_ = value;
      }
    }

    /// <summary>Field number for the "delivery_year" field.</summary>
    public const int DeliveryYearFieldNumber = 6;
    private int deliveryYear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeliveryYear {
      get { return deliveryYear_; }
      set {
        deliveryYear_ = value;
      }
    }

    /// <summary>Field number for the "delivery_month" field.</summary>
    public const int DeliveryMonthFieldNumber = 7;
    private int deliveryMonth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeliveryMonth {
      get { return deliveryMonth_; }
      set {
        deliveryMonth_ = value;
      }
    }

    /// <summary>Field number for the "max_market_order_volume" field.</summary>
    public const int MaxMarketOrderVolumeFieldNumber = 8;
    private int maxMarketOrderVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxMarketOrderVolume {
      get { return maxMarketOrderVolume_; }
      set {
        maxMarketOrderVolume_ = value;
      }
    }

    /// <summary>Field number for the "min_market_order_volume" field.</summary>
    public const int MinMarketOrderVolumeFieldNumber = 9;
    private int minMarketOrderVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinMarketOrderVolume {
      get { return minMarketOrderVolume_; }
      set {
        minMarketOrderVolume_ = value;
      }
    }

    /// <summary>Field number for the "max_limit_order_volume" field.</summary>
    public const int MaxLimitOrderVolumeFieldNumber = 10;
    private int maxLimitOrderVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxLimitOrderVolume {
      get { return maxLimitOrderVolume_; }
      set {
        maxLimitOrderVolume_ = value;
      }
    }

    /// <summary>Field number for the "min_limit_order_volume" field.</summary>
    public const int MinLimitOrderVolumeFieldNumber = 11;
    private int minLimitOrderVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinLimitOrderVolume {
      get { return minLimitOrderVolume_; }
      set {
        minLimitOrderVolume_ = value;
      }
    }

    /// <summary>Field number for the "volume_multiple" field.</summary>
    public const int VolumeMultipleFieldNumber = 12;
    private int volumeMultiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VolumeMultiple {
      get { return volumeMultiple_; }
      set {
        volumeMultiple_ = value;
      }
    }

    /// <summary>Field number for the "price_tick" field.</summary>
    public const int PriceTickFieldNumber = 13;
    private double priceTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PriceTick {
      get { return priceTick_; }
      set {
        priceTick_ = value;
      }
    }

    /// <summary>Field number for the "create_date" field.</summary>
    public const int CreateDateFieldNumber = 14;
    private string createDate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateDate {
      get { return createDate_; }
      set {
        createDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "open_date" field.</summary>
    public const int OpenDateFieldNumber = 15;
    private string openDate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenDate {
      get { return openDate_; }
      set {
        openDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expire_date" field.</summary>
    public const int ExpireDateFieldNumber = 16;
    private string expireDate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpireDate {
      get { return expireDate_; }
      set {
        expireDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_deliv_date" field.</summary>
    public const int StartDelivDateFieldNumber = 17;
    private string startDelivDate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartDelivDate {
      get { return startDelivDate_; }
      set {
        startDelivDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "end_deliv_date" field.</summary>
    public const int EndDelivDateFieldNumber = 18;
    private string endDelivDate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndDelivDate {
      get { return endDelivDate_; }
      set {
        endDelivDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_trading" field.</summary>
    public const int IsTradingFieldNumber = 19;
    private bool isTrading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTrading {
      get { return isTrading_; }
      set {
        isTrading_ = value;
      }
    }

    /// <summary>Field number for the "underlying_multiple" field.</summary>
    public const int UnderlyingMultipleFieldNumber = 20;
    private int underlyingMultiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnderlyingMultiple {
      get { return underlyingMultiple_; }
      set {
        underlyingMultiple_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstrumentField);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstrumentField other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstrumentId != other.InstrumentId) return false;
      if (ExchangeId != other.ExchangeId) return false;
      if (InstrumentName != other.InstrumentName) return false;
      if (ProductId != other.ProductId) return false;
      if (ProductClass != other.ProductClass) return false;
      if (DeliveryYear != other.DeliveryYear) return false;
      if (DeliveryMonth != other.DeliveryMonth) return false;
      if (MaxMarketOrderVolume != other.MaxMarketOrderVolume) return false;
      if (MinMarketOrderVolume != other.MinMarketOrderVolume) return false;
      if (MaxLimitOrderVolume != other.MaxLimitOrderVolume) return false;
      if (MinLimitOrderVolume != other.MinLimitOrderVolume) return false;
      if (VolumeMultiple != other.VolumeMultiple) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PriceTick, other.PriceTick)) return false;
      if (CreateDate != other.CreateDate) return false;
      if (OpenDate != other.OpenDate) return false;
      if (ExpireDate != other.ExpireDate) return false;
      if (StartDelivDate != other.StartDelivDate) return false;
      if (EndDelivDate != other.EndDelivDate) return false;
      if (IsTrading != other.IsTrading) return false;
      if (UnderlyingMultiple != other.UnderlyingMultiple) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstrumentId.Length != 0) hash ^= InstrumentId.GetHashCode();
      if (ExchangeId.Length != 0) hash ^= ExchangeId.GetHashCode();
      if (InstrumentName.Length != 0) hash ^= InstrumentName.GetHashCode();
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      if (ProductClass != 0) hash ^= ProductClass.GetHashCode();
      if (DeliveryYear != 0) hash ^= DeliveryYear.GetHashCode();
      if (DeliveryMonth != 0) hash ^= DeliveryMonth.GetHashCode();
      if (MaxMarketOrderVolume != 0) hash ^= MaxMarketOrderVolume.GetHashCode();
      if (MinMarketOrderVolume != 0) hash ^= MinMarketOrderVolume.GetHashCode();
      if (MaxLimitOrderVolume != 0) hash ^= MaxLimitOrderVolume.GetHashCode();
      if (MinLimitOrderVolume != 0) hash ^= MinLimitOrderVolume.GetHashCode();
      if (VolumeMultiple != 0) hash ^= VolumeMultiple.GetHashCode();
      if (PriceTick != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PriceTick);
      if (CreateDate.Length != 0) hash ^= CreateDate.GetHashCode();
      if (OpenDate.Length != 0) hash ^= OpenDate.GetHashCode();
      if (ExpireDate.Length != 0) hash ^= ExpireDate.GetHashCode();
      if (StartDelivDate.Length != 0) hash ^= StartDelivDate.GetHashCode();
      if (EndDelivDate.Length != 0) hash ^= EndDelivDate.GetHashCode();
      if (IsTrading != false) hash ^= IsTrading.GetHashCode();
      if (UnderlyingMultiple != 0) hash ^= UnderlyingMultiple.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstrumentId);
      }
      if (ExchangeId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ExchangeId);
      }
      if (InstrumentName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(InstrumentName);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ProductId);
      }
      if (ProductClass != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ProductClass);
      }
      if (DeliveryYear != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DeliveryYear);
      }
      if (DeliveryMonth != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DeliveryMonth);
      }
      if (MaxMarketOrderVolume != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MaxMarketOrderVolume);
      }
      if (MinMarketOrderVolume != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MinMarketOrderVolume);
      }
      if (MaxLimitOrderVolume != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxLimitOrderVolume);
      }
      if (MinLimitOrderVolume != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MinLimitOrderVolume);
      }
      if (VolumeMultiple != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(VolumeMultiple);
      }
      if (PriceTick != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(PriceTick);
      }
      if (CreateDate.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(CreateDate);
      }
      if (OpenDate.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(OpenDate);
      }
      if (ExpireDate.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(ExpireDate);
      }
      if (StartDelivDate.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(StartDelivDate);
      }
      if (EndDelivDate.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(EndDelivDate);
      }
      if (IsTrading != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsTrading);
      }
      if (UnderlyingMultiple != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(UnderlyingMultiple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstrumentId);
      }
      if (ExchangeId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ExchangeId);
      }
      if (InstrumentName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(InstrumentName);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ProductId);
      }
      if (ProductClass != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ProductClass);
      }
      if (DeliveryYear != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DeliveryYear);
      }
      if (DeliveryMonth != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DeliveryMonth);
      }
      if (MaxMarketOrderVolume != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MaxMarketOrderVolume);
      }
      if (MinMarketOrderVolume != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MinMarketOrderVolume);
      }
      if (MaxLimitOrderVolume != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxLimitOrderVolume);
      }
      if (MinLimitOrderVolume != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MinLimitOrderVolume);
      }
      if (VolumeMultiple != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(VolumeMultiple);
      }
      if (PriceTick != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(PriceTick);
      }
      if (CreateDate.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(CreateDate);
      }
      if (OpenDate.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(OpenDate);
      }
      if (ExpireDate.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(ExpireDate);
      }
      if (StartDelivDate.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(StartDelivDate);
      }
      if (EndDelivDate.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(EndDelivDate);
      }
      if (IsTrading != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsTrading);
      }
      if (UnderlyingMultiple != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(UnderlyingMultiple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstrumentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentId);
      }
      if (ExchangeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExchangeId);
      }
      if (InstrumentName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(InstrumentName);
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (ProductClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProductClass);
      }
      if (DeliveryYear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeliveryYear);
      }
      if (DeliveryMonth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeliveryMonth);
      }
      if (MaxMarketOrderVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMarketOrderVolume);
      }
      if (MinMarketOrderVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinMarketOrderVolume);
      }
      if (MaxLimitOrderVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxLimitOrderVolume);
      }
      if (MinLimitOrderVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinLimitOrderVolume);
      }
      if (VolumeMultiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VolumeMultiple);
      }
      if (PriceTick != 0D) {
        size += 1 + 8;
      }
      if (CreateDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateDate);
      }
      if (OpenDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenDate);
      }
      if (ExpireDate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExpireDate);
      }
      if (StartDelivDate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StartDelivDate);
      }
      if (EndDelivDate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EndDelivDate);
      }
      if (IsTrading != false) {
        size += 2 + 1;
      }
      if (UnderlyingMultiple != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnderlyingMultiple);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstrumentField other) {
      if (other == null) {
        return;
      }
      if (other.InstrumentId.Length != 0) {
        InstrumentId = other.InstrumentId;
      }
      if (other.ExchangeId.Length != 0) {
        ExchangeId = other.ExchangeId;
      }
      if (other.InstrumentName.Length != 0) {
        InstrumentName = other.InstrumentName;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
      if (other.ProductClass != 0) {
        ProductClass = other.ProductClass;
      }
      if (other.DeliveryYear != 0) {
        DeliveryYear = other.DeliveryYear;
      }
      if (other.DeliveryMonth != 0) {
        DeliveryMonth = other.DeliveryMonth;
      }
      if (other.MaxMarketOrderVolume != 0) {
        MaxMarketOrderVolume = other.MaxMarketOrderVolume;
      }
      if (other.MinMarketOrderVolume != 0) {
        MinMarketOrderVolume = other.MinMarketOrderVolume;
      }
      if (other.MaxLimitOrderVolume != 0) {
        MaxLimitOrderVolume = other.MaxLimitOrderVolume;
      }
      if (other.MinLimitOrderVolume != 0) {
        MinLimitOrderVolume = other.MinLimitOrderVolume;
      }
      if (other.VolumeMultiple != 0) {
        VolumeMultiple = other.VolumeMultiple;
      }
      if (other.PriceTick != 0D) {
        PriceTick = other.PriceTick;
      }
      if (other.CreateDate.Length != 0) {
        CreateDate = other.CreateDate;
      }
      if (other.OpenDate.Length != 0) {
        OpenDate = other.OpenDate;
      }
      if (other.ExpireDate.Length != 0) {
        ExpireDate = other.ExpireDate;
      }
      if (other.StartDelivDate.Length != 0) {
        StartDelivDate = other.StartDelivDate;
      }
      if (other.EndDelivDate.Length != 0) {
        EndDelivDate = other.EndDelivDate;
      }
      if (other.IsTrading != false) {
        IsTrading = other.IsTrading;
      }
      if (other.UnderlyingMultiple != 0) {
        UnderlyingMultiple = other.UnderlyingMultiple;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstrumentId = input.ReadString();
            break;
          }
          case 18: {
            ExchangeId = input.ReadString();
            break;
          }
          case 26: {
            InstrumentName = input.ReadBytes();
            break;
          }
          case 34: {
            ProductId = input.ReadString();
            break;
          }
          case 40: {
            ProductClass = input.ReadInt32();
            break;
          }
          case 48: {
            DeliveryYear = input.ReadInt32();
            break;
          }
          case 56: {
            DeliveryMonth = input.ReadInt32();
            break;
          }
          case 64: {
            MaxMarketOrderVolume = input.ReadInt32();
            break;
          }
          case 72: {
            MinMarketOrderVolume = input.ReadInt32();
            break;
          }
          case 80: {
            MaxLimitOrderVolume = input.ReadInt32();
            break;
          }
          case 88: {
            MinLimitOrderVolume = input.ReadInt32();
            break;
          }
          case 96: {
            VolumeMultiple = input.ReadInt32();
            break;
          }
          case 105: {
            PriceTick = input.ReadDouble();
            break;
          }
          case 114: {
            CreateDate = input.ReadString();
            break;
          }
          case 122: {
            OpenDate = input.ReadString();
            break;
          }
          case 130: {
            ExpireDate = input.ReadString();
            break;
          }
          case 138: {
            StartDelivDate = input.ReadString();
            break;
          }
          case 146: {
            EndDelivDate = input.ReadString();
            break;
          }
          case 152: {
            IsTrading = input.ReadBool();
            break;
          }
          case 160: {
            UnderlyingMultiple = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            InstrumentId = input.ReadString();
            break;
          }
          case 18: {
            ExchangeId = input.ReadString();
            break;
          }
          case 26: {
            InstrumentName = input.ReadBytes();
            break;
          }
          case 34: {
            ProductId = input.ReadString();
            break;
          }
          case 40: {
            ProductClass = input.ReadInt32();
            break;
          }
          case 48: {
            DeliveryYear = input.ReadInt32();
            break;
          }
          case 56: {
            DeliveryMonth = input.ReadInt32();
            break;
          }
          case 64: {
            MaxMarketOrderVolume = input.ReadInt32();
            break;
          }
          case 72: {
            MinMarketOrderVolume = input.ReadInt32();
            break;
          }
          case 80: {
            MaxLimitOrderVolume = input.ReadInt32();
            break;
          }
          case 88: {
            MinLimitOrderVolume = input.ReadInt32();
            break;
          }
          case 96: {
            VolumeMultiple = input.ReadInt32();
            break;
          }
          case 105: {
            PriceTick = input.ReadDouble();
            break;
          }
          case 114: {
            CreateDate = input.ReadString();
            break;
          }
          case 122: {
            OpenDate = input.ReadString();
            break;
          }
          case 130: {
            ExpireDate = input.ReadString();
            break;
          }
          case 138: {
            StartDelivDate = input.ReadString();
            break;
          }
          case 146: {
            EndDelivDate = input.ReadString();
            break;
          }
          case 152: {
            IsTrading = input.ReadBool();
            break;
          }
          case 160: {
            UnderlyingMultiple = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
