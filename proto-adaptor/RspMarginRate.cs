// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Rsp.MarginRate.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Evelynn.Base.Proto {

  /// <summary>Holder for reflection information generated from Rsp.MarginRate.proto</summary>
  public static partial class RspMarginRateReflection {

    #region Descriptor
    /// <summary>File descriptor for Rsp.MarginRate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RspMarginRateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRSc3AuTWFyZ2luUmF0ZS5wcm90bxIDcnNwIo0CCg9NYXJnaW5SYXRlRmll",
            "bGQSFQoNaW5zdHJ1bWVudF9pZBgBIAEoCRIRCglicm9rZXJfaWQYAiABKAkS",
            "EwoLaW52ZXN0b3JfaWQYAyABKAkSEgoKaGVkZ2VfZmxhZxgEIAEoBRIiChps",
            "b25nX21hcmdpbl9yYXRpb19ieV9tb25leRgFIAEoARIjChtsb25nX21hcmdp",
            "bl9yYXRpb19ieV92b2x1bWUYBiABKAESIwobc2hvcnRfbWFyZ2luX3JhdGlv",
            "X2J5X21vbmV5GAcgASgBEiQKHHNob3J0X21hcmdpbl9yYXRpb19ieV92b2x1",
            "bWUYCCABKAESEwoLZXhjaGFuZ2VfaWQYCSABKAlCQgoVaW8uZXZlbHlubi5i",
            "YXNlLnByb3RvQhRNYXJnaW5SYXRlRmllbGRQcm90b6oCEkV2ZWx5bm4uQmFz",
            "ZS5Qcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Evelynn.Base.Proto.MarginRateField), global::Evelynn.Base.Proto.MarginRateField.Parser, new[]{ "InstrumentId", "BrokerId", "InvestorId", "HedgeFlag", "LongMarginRatioByMoney", "LongMarginRatioByVolume", "ShortMarginRatioByMoney", "ShortMarginRatioByVolume", "ExchangeId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MarginRateField : pb::IMessage<MarginRateField>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarginRateField> _parser = new pb::MessageParser<MarginRateField>(() => new MarginRateField());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarginRateField> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Evelynn.Base.Proto.RspMarginRateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarginRateField() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarginRateField(MarginRateField other) : this() {
      instrumentId_ = other.instrumentId_;
      brokerId_ = other.brokerId_;
      investorId_ = other.investorId_;
      hedgeFlag_ = other.hedgeFlag_;
      longMarginRatioByMoney_ = other.longMarginRatioByMoney_;
      longMarginRatioByVolume_ = other.longMarginRatioByVolume_;
      shortMarginRatioByMoney_ = other.shortMarginRatioByMoney_;
      shortMarginRatioByVolume_ = other.shortMarginRatioByVolume_;
      exchangeId_ = other.exchangeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarginRateField Clone() {
      return new MarginRateField(this);
    }

    /// <summary>Field number for the "instrument_id" field.</summary>
    public const int InstrumentIdFieldNumber = 1;
    private string instrumentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstrumentId {
      get { return instrumentId_; }
      set {
        instrumentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "broker_id" field.</summary>
    public const int BrokerIdFieldNumber = 2;
    private string brokerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrokerId {
      get { return brokerId_; }
      set {
        brokerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "investor_id" field.</summary>
    public const int InvestorIdFieldNumber = 3;
    private string investorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InvestorId {
      get { return investorId_; }
      set {
        investorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hedge_flag" field.</summary>
    public const int HedgeFlagFieldNumber = 4;
    private int hedgeFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HedgeFlag {
      get { return hedgeFlag_; }
      set {
        hedgeFlag_ = value;
      }
    }

    /// <summary>Field number for the "long_margin_ratio_by_money" field.</summary>
    public const int LongMarginRatioByMoneyFieldNumber = 5;
    private double longMarginRatioByMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LongMarginRatioByMoney {
      get { return longMarginRatioByMoney_; }
      set {
        longMarginRatioByMoney_ = value;
      }
    }

    /// <summary>Field number for the "long_margin_ratio_by_volume" field.</summary>
    public const int LongMarginRatioByVolumeFieldNumber = 6;
    private double longMarginRatioByVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LongMarginRatioByVolume {
      get { return longMarginRatioByVolume_; }
      set {
        longMarginRatioByVolume_ = value;
      }
    }

    /// <summary>Field number for the "short_margin_ratio_by_money" field.</summary>
    public const int ShortMarginRatioByMoneyFieldNumber = 7;
    private double shortMarginRatioByMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ShortMarginRatioByMoney {
      get { return shortMarginRatioByMoney_; }
      set {
        shortMarginRatioByMoney_ = value;
      }
    }

    /// <summary>Field number for the "short_margin_ratio_by_volume" field.</summary>
    public const int ShortMarginRatioByVolumeFieldNumber = 8;
    private double shortMarginRatioByVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ShortMarginRatioByVolume {
      get { return shortMarginRatioByVolume_; }
      set {
        shortMarginRatioByVolume_ = value;
      }
    }

    /// <summary>Field number for the "exchange_id" field.</summary>
    public const int ExchangeIdFieldNumber = 9;
    private string exchangeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExchangeId {
      get { return exchangeId_; }
      set {
        exchangeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarginRateField);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarginRateField other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstrumentId != other.InstrumentId) return false;
      if (BrokerId != other.BrokerId) return false;
      if (InvestorId != other.InvestorId) return false;
      if (HedgeFlag != other.HedgeFlag) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LongMarginRatioByMoney, other.LongMarginRatioByMoney)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LongMarginRatioByVolume, other.LongMarginRatioByVolume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ShortMarginRatioByMoney, other.ShortMarginRatioByMoney)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ShortMarginRatioByVolume, other.ShortMarginRatioByVolume)) return false;
      if (ExchangeId != other.ExchangeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstrumentId.Length != 0) hash ^= InstrumentId.GetHashCode();
      if (BrokerId.Length != 0) hash ^= BrokerId.GetHashCode();
      if (InvestorId.Length != 0) hash ^= InvestorId.GetHashCode();
      if (HedgeFlag != 0) hash ^= HedgeFlag.GetHashCode();
      if (LongMarginRatioByMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LongMarginRatioByMoney);
      if (LongMarginRatioByVolume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LongMarginRatioByVolume);
      if (ShortMarginRatioByMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ShortMarginRatioByMoney);
      if (ShortMarginRatioByVolume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ShortMarginRatioByVolume);
      if (ExchangeId.Length != 0) hash ^= ExchangeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstrumentId);
      }
      if (BrokerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BrokerId);
      }
      if (InvestorId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(InvestorId);
      }
      if (HedgeFlag != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HedgeFlag);
      }
      if (LongMarginRatioByMoney != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(LongMarginRatioByMoney);
      }
      if (LongMarginRatioByVolume != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(LongMarginRatioByVolume);
      }
      if (ShortMarginRatioByMoney != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(ShortMarginRatioByMoney);
      }
      if (ShortMarginRatioByVolume != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(ShortMarginRatioByVolume);
      }
      if (ExchangeId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ExchangeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstrumentId);
      }
      if (BrokerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BrokerId);
      }
      if (InvestorId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(InvestorId);
      }
      if (HedgeFlag != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HedgeFlag);
      }
      if (LongMarginRatioByMoney != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(LongMarginRatioByMoney);
      }
      if (LongMarginRatioByVolume != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(LongMarginRatioByVolume);
      }
      if (ShortMarginRatioByMoney != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(ShortMarginRatioByMoney);
      }
      if (ShortMarginRatioByVolume != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(ShortMarginRatioByVolume);
      }
      if (ExchangeId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ExchangeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstrumentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentId);
      }
      if (BrokerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrokerId);
      }
      if (InvestorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InvestorId);
      }
      if (HedgeFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HedgeFlag);
      }
      if (LongMarginRatioByMoney != 0D) {
        size += 1 + 8;
      }
      if (LongMarginRatioByVolume != 0D) {
        size += 1 + 8;
      }
      if (ShortMarginRatioByMoney != 0D) {
        size += 1 + 8;
      }
      if (ShortMarginRatioByVolume != 0D) {
        size += 1 + 8;
      }
      if (ExchangeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExchangeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarginRateField other) {
      if (other == null) {
        return;
      }
      if (other.InstrumentId.Length != 0) {
        InstrumentId = other.InstrumentId;
      }
      if (other.BrokerId.Length != 0) {
        BrokerId = other.BrokerId;
      }
      if (other.InvestorId.Length != 0) {
        InvestorId = other.InvestorId;
      }
      if (other.HedgeFlag != 0) {
        HedgeFlag = other.HedgeFlag;
      }
      if (other.LongMarginRatioByMoney != 0D) {
        LongMarginRatioByMoney = other.LongMarginRatioByMoney;
      }
      if (other.LongMarginRatioByVolume != 0D) {
        LongMarginRatioByVolume = other.LongMarginRatioByVolume;
      }
      if (other.ShortMarginRatioByMoney != 0D) {
        ShortMarginRatioByMoney = other.ShortMarginRatioByMoney;
      }
      if (other.ShortMarginRatioByVolume != 0D) {
        ShortMarginRatioByVolume = other.ShortMarginRatioByVolume;
      }
      if (other.ExchangeId.Length != 0) {
        ExchangeId = other.ExchangeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstrumentId = input.ReadString();
            break;
          }
          case 18: {
            BrokerId = input.ReadString();
            break;
          }
          case 26: {
            InvestorId = input.ReadString();
            break;
          }
          case 32: {
            HedgeFlag = input.ReadInt32();
            break;
          }
          case 41: {
            LongMarginRatioByMoney = input.ReadDouble();
            break;
          }
          case 49: {
            LongMarginRatioByVolume = input.ReadDouble();
            break;
          }
          case 57: {
            ShortMarginRatioByMoney = input.ReadDouble();
            break;
          }
          case 65: {
            ShortMarginRatioByVolume = input.ReadDouble();
            break;
          }
          case 74: {
            ExchangeId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            InstrumentId = input.ReadString();
            break;
          }
          case 18: {
            BrokerId = input.ReadString();
            break;
          }
          case 26: {
            InvestorId = input.ReadString();
            break;
          }
          case 32: {
            HedgeFlag = input.ReadInt32();
            break;
          }
          case 41: {
            LongMarginRatioByMoney = input.ReadDouble();
            break;
          }
          case 49: {
            LongMarginRatioByVolume = input.ReadDouble();
            break;
          }
          case 57: {
            ShortMarginRatioByMoney = input.ReadDouble();
            break;
          }
          case 65: {
            ShortMarginRatioByVolume = input.ReadDouble();
            break;
          }
          case 74: {
            ExchangeId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
