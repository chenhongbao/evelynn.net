// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Rtn.Trade.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Evelynn.Base.Proto {

  /// <summary>Holder for reflection information generated from Rtn.Trade.proto</summary>
  public static partial class RtnTradeReflection {

    #region Descriptor
    /// <summary>File descriptor for Rtn.Trade.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RtnTradeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9SdG4uVHJhZGUucHJvdG8SA3J0biLLAgoKVHJhZGVGaWVsZBIRCglicm9r",
            "ZXJfaWQYASABKAkSEwoLaW52ZXN0b3JfaWQYAiABKAkSFQoNaW5zdHJ1bWVu",
            "dF9pZBgDIAEoCRIRCglvcmRlcl9yZWYYBCABKAkSDwoHdXNlcl9pZBgFIAEo",
            "CRIQCgh0cmFkZV9pZBgGIAEoCRIRCglkaXJlY3Rpb24YByABKAUSEwoLb2Zm",
            "c2V0X2ZsYWcYCCABKAUSEgoKaGVkZ2VfZmxhZxgJIAEoBRINCgVwcmljZRgK",
            "IAEoARIOCgZ2b2x1bWUYCyABKAUSEgoKdHJhZGVfZGF0ZRgMIAEoCRISCgp0",
            "cmFkZV90aW1lGA0gASgJEhYKDm9yZGVyX2xvY2FsX2lkGA4gASgJEhMKC3Ry",
            "YWRpbmdfZGF5GA8gASgJEhgKEGJyb2tlcl9vcmRlcl9zZXEYECABKAVCPQoV",
            "aW8uZXZlbHlubi5iYXNlLnByb3RvQg9UcmFkZUZpZWxkUHJvdG+qAhJFdmVs",
            "eW5uLkJhc2UuUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Evelynn.Base.Proto.TradeField), global::Evelynn.Base.Proto.TradeField.Parser, new[]{ "BrokerId", "InvestorId", "InstrumentId", "OrderRef", "UserId", "TradeId", "Direction", "OffsetFlag", "HedgeFlag", "Price", "Volume", "TradeDate", "TradeTime", "OrderLocalId", "TradingDay", "BrokerOrderSeq" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TradeField : pb::IMessage<TradeField>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradeField> _parser = new pb::MessageParser<TradeField>(() => new TradeField());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeField> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Evelynn.Base.Proto.RtnTradeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeField() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeField(TradeField other) : this() {
      brokerId_ = other.brokerId_;
      investorId_ = other.investorId_;
      instrumentId_ = other.instrumentId_;
      orderRef_ = other.orderRef_;
      userId_ = other.userId_;
      tradeId_ = other.tradeId_;
      direction_ = other.direction_;
      offsetFlag_ = other.offsetFlag_;
      hedgeFlag_ = other.hedgeFlag_;
      price_ = other.price_;
      volume_ = other.volume_;
      tradeDate_ = other.tradeDate_;
      tradeTime_ = other.tradeTime_;
      orderLocalId_ = other.orderLocalId_;
      tradingDay_ = other.tradingDay_;
      brokerOrderSeq_ = other.brokerOrderSeq_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeField Clone() {
      return new TradeField(this);
    }

    /// <summary>Field number for the "broker_id" field.</summary>
    public const int BrokerIdFieldNumber = 1;
    private string brokerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrokerId {
      get { return brokerId_; }
      set {
        brokerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "investor_id" field.</summary>
    public const int InvestorIdFieldNumber = 2;
    private string investorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InvestorId {
      get { return investorId_; }
      set {
        investorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_id" field.</summary>
    public const int InstrumentIdFieldNumber = 3;
    private string instrumentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstrumentId {
      get { return instrumentId_; }
      set {
        instrumentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_ref" field.</summary>
    public const int OrderRefFieldNumber = 4;
    private string orderRef_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderRef {
      get { return orderRef_; }
      set {
        orderRef_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 5;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trade_id" field.</summary>
    public const int TradeIdFieldNumber = 6;
    private string tradeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeId {
      get { return tradeId_; }
      set {
        tradeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 7;
    private int direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "offset_flag" field.</summary>
    public const int OffsetFlagFieldNumber = 8;
    private int offsetFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OffsetFlag {
      get { return offsetFlag_; }
      set {
        offsetFlag_ = value;
      }
    }

    /// <summary>Field number for the "hedge_flag" field.</summary>
    public const int HedgeFlagFieldNumber = 9;
    private int hedgeFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HedgeFlag {
      get { return hedgeFlag_; }
      set {
        hedgeFlag_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 10;
    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 11;
    private int volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "trade_date" field.</summary>
    public const int TradeDateFieldNumber = 12;
    private string tradeDate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trade_time" field.</summary>
    public const int TradeTimeFieldNumber = 13;
    private string tradeTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeTime {
      get { return tradeTime_; }
      set {
        tradeTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_local_id" field.</summary>
    public const int OrderLocalIdFieldNumber = 14;
    private string orderLocalId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderLocalId {
      get { return orderLocalId_; }
      set {
        orderLocalId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trading_day" field.</summary>
    public const int TradingDayFieldNumber = 15;
    private string tradingDay_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradingDay {
      get { return tradingDay_; }
      set {
        tradingDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "broker_order_seq" field.</summary>
    public const int BrokerOrderSeqFieldNumber = 16;
    private int brokerOrderSeq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BrokerOrderSeq {
      get { return brokerOrderSeq_; }
      set {
        brokerOrderSeq_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradeField);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradeField other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BrokerId != other.BrokerId) return false;
      if (InvestorId != other.InvestorId) return false;
      if (InstrumentId != other.InstrumentId) return false;
      if (OrderRef != other.OrderRef) return false;
      if (UserId != other.UserId) return false;
      if (TradeId != other.TradeId) return false;
      if (Direction != other.Direction) return false;
      if (OffsetFlag != other.OffsetFlag) return false;
      if (HedgeFlag != other.HedgeFlag) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (Volume != other.Volume) return false;
      if (TradeDate != other.TradeDate) return false;
      if (TradeTime != other.TradeTime) return false;
      if (OrderLocalId != other.OrderLocalId) return false;
      if (TradingDay != other.TradingDay) return false;
      if (BrokerOrderSeq != other.BrokerOrderSeq) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BrokerId.Length != 0) hash ^= BrokerId.GetHashCode();
      if (InvestorId.Length != 0) hash ^= InvestorId.GetHashCode();
      if (InstrumentId.Length != 0) hash ^= InstrumentId.GetHashCode();
      if (OrderRef.Length != 0) hash ^= OrderRef.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (TradeId.Length != 0) hash ^= TradeId.GetHashCode();
      if (Direction != 0) hash ^= Direction.GetHashCode();
      if (OffsetFlag != 0) hash ^= OffsetFlag.GetHashCode();
      if (HedgeFlag != 0) hash ^= HedgeFlag.GetHashCode();
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (Volume != 0) hash ^= Volume.GetHashCode();
      if (TradeDate.Length != 0) hash ^= TradeDate.GetHashCode();
      if (TradeTime.Length != 0) hash ^= TradeTime.GetHashCode();
      if (OrderLocalId.Length != 0) hash ^= OrderLocalId.GetHashCode();
      if (TradingDay.Length != 0) hash ^= TradingDay.GetHashCode();
      if (BrokerOrderSeq != 0) hash ^= BrokerOrderSeq.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BrokerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BrokerId);
      }
      if (InvestorId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InvestorId);
      }
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(InstrumentId);
      }
      if (OrderRef.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OrderRef);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UserId);
      }
      if (TradeId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TradeId);
      }
      if (Direction != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Direction);
      }
      if (OffsetFlag != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(OffsetFlag);
      }
      if (HedgeFlag != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HedgeFlag);
      }
      if (Price != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Price);
      }
      if (Volume != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Volume);
      }
      if (TradeDate.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(TradeDate);
      }
      if (TradeTime.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(TradeTime);
      }
      if (OrderLocalId.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(OrderLocalId);
      }
      if (TradingDay.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(TradingDay);
      }
      if (BrokerOrderSeq != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(BrokerOrderSeq);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BrokerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BrokerId);
      }
      if (InvestorId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InvestorId);
      }
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(InstrumentId);
      }
      if (OrderRef.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OrderRef);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UserId);
      }
      if (TradeId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TradeId);
      }
      if (Direction != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Direction);
      }
      if (OffsetFlag != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(OffsetFlag);
      }
      if (HedgeFlag != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HedgeFlag);
      }
      if (Price != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Price);
      }
      if (Volume != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Volume);
      }
      if (TradeDate.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(TradeDate);
      }
      if (TradeTime.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(TradeTime);
      }
      if (OrderLocalId.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(OrderLocalId);
      }
      if (TradingDay.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(TradingDay);
      }
      if (BrokerOrderSeq != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(BrokerOrderSeq);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BrokerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrokerId);
      }
      if (InvestorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InvestorId);
      }
      if (InstrumentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentId);
      }
      if (OrderRef.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderRef);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (TradeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeId);
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Direction);
      }
      if (OffsetFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffsetFlag);
      }
      if (HedgeFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HedgeFlag);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (Volume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Volume);
      }
      if (TradeDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeDate);
      }
      if (TradeTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeTime);
      }
      if (OrderLocalId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderLocalId);
      }
      if (TradingDay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradingDay);
      }
      if (BrokerOrderSeq != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BrokerOrderSeq);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradeField other) {
      if (other == null) {
        return;
      }
      if (other.BrokerId.Length != 0) {
        BrokerId = other.BrokerId;
      }
      if (other.InvestorId.Length != 0) {
        InvestorId = other.InvestorId;
      }
      if (other.InstrumentId.Length != 0) {
        InstrumentId = other.InstrumentId;
      }
      if (other.OrderRef.Length != 0) {
        OrderRef = other.OrderRef;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.TradeId.Length != 0) {
        TradeId = other.TradeId;
      }
      if (other.Direction != 0) {
        Direction = other.Direction;
      }
      if (other.OffsetFlag != 0) {
        OffsetFlag = other.OffsetFlag;
      }
      if (other.HedgeFlag != 0) {
        HedgeFlag = other.HedgeFlag;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.Volume != 0) {
        Volume = other.Volume;
      }
      if (other.TradeDate.Length != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.TradeTime.Length != 0) {
        TradeTime = other.TradeTime;
      }
      if (other.OrderLocalId.Length != 0) {
        OrderLocalId = other.OrderLocalId;
      }
      if (other.TradingDay.Length != 0) {
        TradingDay = other.TradingDay;
      }
      if (other.BrokerOrderSeq != 0) {
        BrokerOrderSeq = other.BrokerOrderSeq;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BrokerId = input.ReadString();
            break;
          }
          case 18: {
            InvestorId = input.ReadString();
            break;
          }
          case 26: {
            InstrumentId = input.ReadString();
            break;
          }
          case 34: {
            OrderRef = input.ReadString();
            break;
          }
          case 42: {
            UserId = input.ReadString();
            break;
          }
          case 50: {
            TradeId = input.ReadString();
            break;
          }
          case 56: {
            Direction = input.ReadInt32();
            break;
          }
          case 64: {
            OffsetFlag = input.ReadInt32();
            break;
          }
          case 72: {
            HedgeFlag = input.ReadInt32();
            break;
          }
          case 81: {
            Price = input.ReadDouble();
            break;
          }
          case 88: {
            Volume = input.ReadInt32();
            break;
          }
          case 98: {
            TradeDate = input.ReadString();
            break;
          }
          case 106: {
            TradeTime = input.ReadString();
            break;
          }
          case 114: {
            OrderLocalId = input.ReadString();
            break;
          }
          case 122: {
            TradingDay = input.ReadString();
            break;
          }
          case 128: {
            BrokerOrderSeq = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            BrokerId = input.ReadString();
            break;
          }
          case 18: {
            InvestorId = input.ReadString();
            break;
          }
          case 26: {
            InstrumentId = input.ReadString();
            break;
          }
          case 34: {
            OrderRef = input.ReadString();
            break;
          }
          case 42: {
            UserId = input.ReadString();
            break;
          }
          case 50: {
            TradeId = input.ReadString();
            break;
          }
          case 56: {
            Direction = input.ReadInt32();
            break;
          }
          case 64: {
            OffsetFlag = input.ReadInt32();
            break;
          }
          case 72: {
            HedgeFlag = input.ReadInt32();
            break;
          }
          case 81: {
            Price = input.ReadDouble();
            break;
          }
          case 88: {
            Volume = input.ReadInt32();
            break;
          }
          case 98: {
            TradeDate = input.ReadString();
            break;
          }
          case 106: {
            TradeTime = input.ReadString();
            break;
          }
          case 114: {
            OrderLocalId = input.ReadString();
            break;
          }
          case 122: {
            TradingDay = input.ReadString();
            break;
          }
          case 128: {
            BrokerOrderSeq = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
